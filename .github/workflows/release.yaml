name: Release

on:
  workflow_call:
    inputs:
      chart_path:
        required: true
        type: string
      image_name:
        required: true
        type: string
      image_tag:
        required: true
        type: string
    secrets:
      gha_pat:
        required: true

jobs:
  docker-publish:
    name: Build and Push Docker Image
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/arm64
          tags: ghcr.io/spitikos/${{ inputs.image_name }}:${{ inputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-chart:
    name: Update Image Tag in Chart
    runs-on: ubuntu-latest
    needs: docker-publish
    permissions:
      contents: write
    strategy:
      matrix:
        chart_path: ${{ fromJSON(inputs.chart_path) }}

    steps:
      - name: Checkout Charts Repository
        uses: actions/checkout@v4
        with:
          repository: spitikos/charts
          token: ${{ secrets.gha_pat }}
          path: charts

      - name: Sanitize chart path for artifact name
        id: sanitize
        run: |
          sanitized_name=$(echo "${{ matrix.chart_path }}" | tr '/' '-')
          echo "name=${sanitized_name}" >> $GITHUB_OUTPUT

      - name: Update image tag in ${{ matrix.chart_path }}
        uses: mikefarah/yq@master
        with:
          cmd: yq -i '.image.tag = "${{ inputs.image_tag }}"' "./charts/${{ matrix.chart_path }}/values.yaml"

      - name: Upload modified values.yaml as artifact
        uses: actions/upload-artifact@v4
        with:
          name: charts-patch-${{ steps.sanitize.outputs.name }}
          path: ./charts/${{ matrix.chart_path }}/values.yaml
          retention-days: 1

  commit-changes:
    name: Commit All Chart Changes
    runs-on: ubuntu-latest
    needs: update-chart
    permissions:
      contents: write

    steps:
      - name: Checkout Charts Repository
        uses: actions/checkout@v4
        with:
          repository: spitikos/charts
          token: ${{ secrets.gha_pat }}

      - name: Download all patched chart values
        uses: actions/download-artifact@v4
        with:
          path: patches
          pattern: charts-patch-*
          merge-multiple: true

      - name: Apply patches and commit
        run: |
          # Loop over each downloaded patch file in the 'patches' directory
          for patch_file in patches/charts-patch-*; do
            # Extract the sanitized path from the filename
            sanitized_path=${patch_file#patches/charts-patch-}
            
            # Reconstruct the original path
            original_path=$(echo "$sanitized_path" | tr '-' '/')
            
            # Ensure the destination directory exists
            mkdir -p "$(dirname "$original_path")"
            
            # Move the patched file to the correct location, renaming it to values.yaml
            echo "Moving $patch_file to $original_path/values.yaml"
            mv "$patch_file" "$original_path/values.yaml"
          done
          
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          
          # Stage all moved files
          git add .
          
          if ! git diff --staged --quiet; then
            git commit -m "Update ${{ inputs.image_name }} image to tag ${{ inputs.image_tag }}"
            git push origin main
          else
            echo "No changes to commit."
          fi
